import { createWorkflow } from '@mastra/core/workflows';
import { z } from 'zod';
import { proposeFix } from '../steps/05-propose-fix.js';

// Test workflow for the propose/fix part - covers step 5
// This workflow tests the GPT-5 powered fix generation
export const testProposeFixWorkflow = createWorkflow({
  id: 'test-propose-fix-workflow',
  inputSchema: z.object({
    runId: z.string(),
    owner: z.string(),
    repo: z.string(),
    baseBranch: z.string(),
    candidatePath: z.string(),
    fileText: z.string(),
    fileSha: z.string(),
    token: z.string().optional(),
    prTitle: z.string().optional(),
    prBody: z.string().optional(),
    errorHeader: z.string().optional(),
    prompt: z.string(),
  }),
  outputSchema: z.object({
    runId: z.string(),
    owner: z.string(),
    repo: z.string(),
    baseBranch: z.string(),
    candidatePath: z.string(),
    fileSha: z.string(),
    updatedText: z.string(),
    token: z.string().optional(),
    prTitle: z.string().optional(),
    prBody: z.string().optional(),
  }),
})
  .then(proposeFix);

testProposeFixWorkflow.commit();

// Simple programmatic runner for testing propose/fix workflow
export async function startTestProposeFixWorkflow(input: z.infer<typeof proposeFix.inputSchema>) {
  console.log('[test-propose-fix] Starting propose/fix test workflow...');
  try {
    const originalLength = input.fileText.length;
    
    const result = await (proposeFix as any).execute({ inputData: input });
    console.log('[test-propose-fix] ✓ Fix proposed');
    
    const updatedLength = result.updatedText.length;
    const hasChanges = result.updatedText !== input.fileText;
    
    console.log('[test-propose-fix] Analysis:', {
      originalLength,
      updatedLength,
      hasChanges,
      filePath: result.candidatePath,
      language: (/(\.ts|\.tsx)$/i.test(result.candidatePath)) ? 'TypeScript' : 'Other'
    });
    
    if (hasChanges) {
      console.log('[test-propose-fix] ✅ Fix generation completed with changes!');
    } else {
      console.log('[test-propose-fix] ⚠️  Fix generation completed but no changes detected');
    }
    
    return result;
  } catch (err) {
    console.error('[test-propose-fix] ❌ Propose/fix workflow failed:', String(err));
    throw err;
  }
}

// Helper function to create mock file data for testing
export function createMockFileData(overrides: Partial<z.infer<typeof proposeFix.inputSchema>> = {}) {
  return {
    runId: `test-${Date.now()}`,
    owner: 'AntonioAEMartins',
    repo: 'yc-hackathon-social',
    baseBranch: 'main',
    candidatePath: 'src/server/friends.routes.ts',
    fileText: `// Example TypeScript file with intentional error
import { Request, Response } from 'express';

export async function createFriend(req: Request, res: Response) {
  try {
    // Intentional test error - missing validation
    const friendData = req.body;
    console.log('Creating friend:', friendData);
    
    // This line will cause an error
    throw new Error('Intentional test error in src/server/friends.routes.ts');
    
    res.status(201).json({ success: true });
  } catch (error) {
    console.error('Error creating friend:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}`,
    fileSha: 'mock-sha-123',
    token: process.env.GITHUB_MCP_PAT,
    prTitle: 'Test Fix: Automated fix from Sentry alert',
    prBody: 'This is a test fix generated by the propose-fix workflow.',
    errorHeader: 'Error: Intentional test error in src/server/friends.routes.ts',
    prompt: `Stack trace:
Error: Intentional test error in src/server/friends.routes.ts
    at POST /friends (src/server/friends.routes.ts:100:10)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)

Repo URL:
https://github.com/AntonioAEMartins/yc-hackathon-social/blob/main/src/server/friends.routes.ts

File relative path:
src/server/friends.routes.ts`,
    ...overrides,
  };
}
