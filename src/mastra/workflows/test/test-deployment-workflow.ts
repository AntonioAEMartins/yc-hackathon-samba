import { createWorkflow } from '@mastra/core/workflows';
import { z } from 'zod';
import { commitFix } from '../steps/06-commit-fix.js';
import { openPr } from '../steps/07-open-pr.js';
import { mergePr } from '../steps/08-merge-pr.js';
import { initFreestyle } from '../steps/09-init-freestyle.js'; // Freestyle step is disabled internally

// Test workflow for the deployment/GitHub part - covers steps 6-9
// This workflow tests: committing fixes, opening PRs, merging PRs (Freestyle sandbox disabled)
export const testDeploymentWorkflow = createWorkflow({
  id: 'test-deployment-workflow',
  inputSchema: z.object({
    runId: z.string(),
    owner: z.string(),
    repo: z.string(),
    baseBranch: z.string(),
    candidatePath: z.string(),
    fileSha: z.string(),
    updatedText: z.string(),
    token: z.string().optional(),
    prTitle: z.string().optional(),
    prBody: z.string().optional(),
  }),
  outputSchema: z.object({
    runId: z.string().optional(),
    prNumber: z.number(),
    merged: z.boolean(),
    freestyleUrl: z.string().optional(), // Will be undefined since Freestyle is disabled
  }),
})
  .then(commitFix)
  .then(openPr)
  .then(mergePr)
  .then(initFreestyle); // Freestyle step is now a no-op that just logs

testDeploymentWorkflow.commit();

// Simple programmatic runner for testing deployment workflow
export async function startTestDeploymentWorkflow(input: z.infer<typeof commitFix.inputSchema>) {
  console.log('[test-deployment] Starting deployment/GitHub test workflow...');
  try {
    const committed = await (commitFix as any).execute({ inputData: input });
    console.log('[test-deployment] ✓ Fix committed', { 
      branch: committed.branch,
      commitSha: committed.commitSha,
      newSha: committed.newSha
    });
    
    const prOpened = await (openPr as any).execute({ inputData: committed });
    console.log('[test-deployment] ✓ PR opened', { 
      number: prOpened.number,
      url: prOpened.url,
      state: prOpened.state
    });
    
    const merged = await (mergePr as any).execute({ inputData: prOpened });
    console.log('[test-deployment] ✓ PR merged', { 
      merged: merged.merged,
      sha: merged.sha
    });
    
    const freestyle = await (initFreestyle as any).execute({ inputData: merged });
    console.log('[test-deployment] ✓ Freestyle step completed (disabled)', { 
      url: freestyle.freestyleUrl || 'Freestyle disabled'
    });
    
    console.log('[test-deployment] ✅ Deployment workflow completed successfully!');
    return freestyle;
  } catch (err) {
    console.error('[test-deployment] ❌ Deployment workflow failed:', String(err));
    throw err;
  }
}

// Helper function to create mock deployment data for testing
export function createMockDeploymentData(overrides: Partial<z.infer<typeof commitFix.inputSchema>> = {}) {
  return {
    runId: `test-deploy-${Date.now()}`,
    owner: 'AntonioAEMartins',
    repo: 'yc-hackathon-social',
    baseBranch: 'main',
    candidatePath: 'src/server/friends.routes.ts',
    fileSha: 'mock-sha-123',
    updatedText: `// Fixed TypeScript file
import { Request, Response } from 'express';

export async function createFriend(req: Request, res: Response) {
  try {
    // Added proper validation
    const friendData = req.body;
    
    if (!friendData || typeof friendData !== 'object') {
      return res.status(400).json({ error: 'Invalid friend data' });
    }
    
    console.log('Creating friend:', friendData);
    
    // Fixed: Removed the intentional error
    // Previous error: throw new Error('Intentional test error in src/server/friends.routes.ts');
    
    res.status(201).json({ success: true, data: friendData });
  } catch (error) {
    console.error('Error creating friend:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}`,
    token: process.env.GITHUB_MCP_PAT,
    prTitle: 'Test Fix: Automated fix from Sentry alert (deployment test)',
    prBody: 'This is a test deployment generated by the deployment workflow. Fixed validation and error handling in friends.routes.ts.',
    ...overrides,
  };
}

// Dry-run version that stops before actual GitHub operations
export async function dryRunTestDeploymentWorkflow(input: z.infer<typeof commitFix.inputSchema>) {
  console.log('[test-deployment-dry] Starting DRY RUN of deployment workflow...');
  
  console.log('[test-deployment-dry] Would commit fix:', {
    repo: `${input.owner}/${input.repo}`,
    branch: input.baseBranch,
    file: input.candidatePath,
    hasUpdatedText: !!input.updatedText,
    textLength: input.updatedText.length
  });
  
  console.log('[test-deployment-dry] Would open PR:', {
    title: input.prTitle || 'fix: automated fix from stack trace',
    body: input.prBody || 'Automated fix generated by workflow.',
    hasToken: !!input.token
  });
  
  console.log('[test-deployment-dry] Would merge PR (Freestyle sandbox is disabled)');
  
  console.log('[test-deployment-dry] ✅ DRY RUN completed - no actual GitHub operations performed');
  
  return {
    runId: input.runId,
    prNumber: 999, // Mock PR number
    merged: true,
    freestyleUrl: 'https://mock-freestyle-url.example.com'
  };
}

